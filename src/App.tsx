import React, { useState, useEffect } from "react";

// Define interface for InputField props
interface InputFieldProps {
  label: string;
  name: string;
  value: string;
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  placeholder?: string;
  className?: string;
  type?: string;
}

// Component for rendering a single input field with styling
// Moved outside the App component to prevent unnecessary re-renders
const InputField: React.FC<InputFieldProps> = ({
  label,
  name,
  value,
  onChange,
  placeholder = "",
  className = "",
  type = "text",
}) => (
  <div className="mb-2 w-full">
    <label htmlFor={name} className="block text-sm font-medium text-gray-700">
      {label}
    </label>
    <input
      type={type}
      id={name}
      name={name}
      value={value}
      onChange={onChange}
      placeholder={placeholder}
      className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2 bg-gray-50 border ${className}`}
    />
  </div>
);

// Component for rendering a table cell input
// Moved outside the App component to prevent unnecessary re-renders
const TableInput = ({
  name,
  value,
  onChange,
  type = "text",
  placeholder = "",
}) => (
  <input
    type={type}
    name={name}
    value={value}
    onChange={onChange}
    placeholder={placeholder}
    className="w-full h-full p-2 border-none bg-transparent focus:outline-none focus:ring-1 focus:ring-blue-500 rounded-md"
  />
);

// Main App component
const App = () => {
  // State for header information
  const [headerInfo, setHeaderInfo] = useState({
    reDestinatarios: "", // Re: Nombre de Proveedor field (visible for dynamic ID)
    deNombrePais: "", // De: Nombre del País field
    nave: "", // Nave: NOMBRE DE BARCO field
    fechaCarga: "", // Fecha de carga: FECHA DE CARGA field
    exporta: "", // Exporta: EXPORTADORA field
    emailSubject: "", // Nuevo campo para el asunto del email
  });

  // State for order items (table rows)
  const [orderItems, setOrderItems] = useState([
    // Initial empty row with a unique ID
    {
      id: crypto.randomUUID(),
      pallets: "",
      especie: "",
      variedad: "",
      formato: "",
      calibre: "",
      categoria: "",
      preciosFOB: "",
      estado: "",
    },
  ]);

  // State to control the visibility of the email content modal
  const [showEmailContent, setShowEmailContent] = useState(false);

  // Function to get current ISO week number
  const getCurrentWeekNumber = () => {
    const date = new Date();
    date.setHours(0, 0, 0, 0);
    // Thursday in current week decides the year.
    date.setDate(date.getDate() + 3 - ((date.getDay() + 6) % 7));
    // January 4 is always in week 1.
    const week1 = new Date(date.getFullYear(), 0, 4);
    // Adjust to Sunday in week 1 and count number of weeks from date to week1.
    return (
      1 +
      Math.round(
        ((date.getTime() - week1.getTime()) / 86400000 -
          3 +
          ((week1.getDay() + 6) % 7)) /
          7
      )
    );
  };

  // Function to generate the email subject based on template
  const generateEmailSubjectValue = (proveedorName) => {
    const weekNumber = getCurrentWeekNumber();
    const cleanProveedor = proveedorName
      ? proveedorName.toUpperCase().replace(/[^A-Z0-9]/g, "")
      : "PROVEEDOR";
    return `PED–W${weekNumber}–${cleanProveedor}–MAN-RG–PAN-CRC-SV`;
  };

  // Effect to set initial email subject when the component mounts
  useEffect(() => {
    setHeaderInfo((prevInfo) => ({
      ...prevInfo,
      emailSubject: generateEmailSubjectValue(prevInfo.reDestinatarios),
    }));
  }, []); // Empty dependency array means this runs once on mount

  // Handle changes in header input fields
  const handleHeaderChange = (e) => {
    const { name, value } = e.target;
    setHeaderInfo((prevInfo) => {
      const newHeaderInfo = { ...prevInfo, [name]: value };

      if (name === "reDestinatarios") {
        // Only update emailSubject if it's currently empty OR matches the auto-generated value for the previous supplier
        // This allows manual edits to persist
        const currentAutoGeneratedSubject = generateEmailSubjectValue(
          prevInfo.reDestinatarios
        );
        if (
          !prevInfo.emailSubject ||
          prevInfo.emailSubject === currentAutoGeneratedSubject
        ) {
          newHeaderInfo.emailSubject = generateEmailSubjectValue(value);
        }
      }
      return newHeaderInfo;
    });
  };

  // Handle changes in order item table input fields
  const handleItemChange = (itemId, e) => {
    const { name, value } = e.target;
    setOrderItems((prevItems) => {
      return prevItems.map((item) =>
        item.id === itemId ? { ...item, [name]: value } : item
      );
    });
  };

  // Add a new row to the order items table
  const handleAddItem = () => {
    setOrderItems((prevItems) => {
      if (prevItems.length > 0) {
        // If there are existing items, duplicate the last one and give it a new unique ID
        const lastItem = prevItems[prevItems.length - 1];
        return [...prevItems, { ...lastItem, id: crypto.randomUUID() }]; // Assign new unique ID
      } else {
        // If no items, add a new empty row with a unique ID
        return [
          ...prevItems,
          {
            id: crypto.randomUUID(),
            pallets: "",
            especie: "",
            variedad: "",
            formato: "",
            calibre: "",
            categoria: "",
            preciosFOB: "",
            estado: "",
          },
        ];
      }
    });
  };

  // Delete a specific row from the order items table
  const handleDeleteItem = (idToDelete) => {
    setOrderItems((prevItems) =>
      prevItems.filter((item) => item.id !== idToDelete)
    );
  };

  // Calculate the total number of pallets (defined within App component scope)
  const totalPallets = orderItems.reduce((sum, item) => {
    const pallets = parseFloat(item.pallets) || 0; // Convert to number, default to 0 if not a valid number
    return sum + pallets;
  }, 0);

  // Get the current dynamic document ID based on reDestinatarios (Nombre de Proveedor)
  // This is used for the Gmail URL fallback if subject is empty, and for the internal document ID logic
  // Using generateEmailSubjectValue here to ensure consistency in the ID format if it's used as a fallback
  const currentDocumentId = generateEmailSubjectValue(
    headerInfo.reDestinatarios
  );

  // Helper function to format date
  const formatDateToSpanish = (dateString) => {
    const months = [
      "Enero",
      "Febrero",
      "Marzo",
      "Abril",
      "Mayo",
      "Junio",
      "Julio",
      "Agosto",
      "Septiembre",
      "Octubre",
      "Noviembre",
      "Diciembre",
    ];
    try {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) {
        return dateString; // Return original string if invalid date
      }
      const day = date.getDate().toString().padStart(2, "0");
      const month = months[date.getMonth()];
      const year = date.getFullYear();
      return `${day} - ${month} - ${year}`;
    } catch (e) {
      return dateString; // Fallback in case of parsing errors
    }
  };

  // Function to generate the HTML content for the email body (formatted table and introductory lines)
  // Now accepts currentTotalPallets as an argument
  const generateFormattedEmailHtmlContent = (currentTotalPallets) => {
    // Apply formatting to header info for email content
    const formattedNave = headerInfo.nave.toUpperCase();
    const formattedPais = headerInfo.deNombrePais.toUpperCase();
    const formattedFechaCarga = formatDateToSpanish(headerInfo.fechaCarga);
    const formattedExporta = headerInfo.exporta.toUpperCase();

    const htmlContent = `
        <div style="font-family: Arial, sans-serif; font-size: 14px; color: #333;">
            <p><strong>Nave:</strong> ${formattedNave}</p>
            <p><strong>País:</strong> ${formattedPais}</p>
            <p><strong>Fecha de carga:</strong> ${formattedFechaCarga}</p>
            <p><strong>Exporta:</strong> ${formattedExporta}</p>

            <p style="font-size: 16px; font-weight: bold; margin-top: 20px; margin-bottom: 10px;">Detalle del Pedido:</p>
            <table border="1" cellpadding="0" cellspacing="0" style="width: 100%; border-collapse: collapse; border: 1px solid #ddd; border-radius: 8px; overflow: hidden;">
                <thead>
                    <tr style="background-color: #2563eb; color: #ffffff;">
                        <th style="padding: 12px 10px; border: 1px solid #1e40af; border-top-left-radius: 8px; text-align: center;">Pallets</th>
                        <th style="padding: 12px 10px; border: 1px solid #1e40af; text-align: center;">Especie</th>
                        <th style="padding: 12px 10px; border: 1px solid #1e40af; text-align: center;">Variedad</th>
                        <th style="padding: 12px 10px; border: 1px solid #1e40af; text-align: center;">Formato</th>
                        <th style="padding: 12px 10px; border: 1px solid #1e40af; text-align: center;">Calibre</th>
                        <th style="padding: 12px 10px; border: 1px solid #1e40af; text-align: center;">Categoría</th>
                        <th style="padding: 12px 10px; border: 1px solid #1e40af; text-align: center;">Precios FOB</th>
                        <th style="padding: 12px 10px; border: 1px solid #1e40af; border-top-right-radius: 8px; text-align: center;">Estado</th>
                    </tr>
                </thead>
                <tbody>
                    ${orderItems
                      .map(
                        (item, idx) => `
                        <tr style="${
                          idx % 2 === 0
                            ? "background-color: #f9f9f9;"
                            : "background-color: #ffffff;"
                        }">
                            <td style="padding: 10px; border: 1px solid #eee; text-align: center;">${
                              item.pallets
                            }</td>
                            <td style="padding: 10px; border: 1px solid #eee; text-align: center;">${
                              item.especie
                            }</td>
                            <td style="padding: 10px; border: 1px solid #eee; text-align: center;">${
                              item.variedad
                            }</td>
                            <td style="padding: 10px; border: 1px solid #eee; text-align: center;">${
                              item.formato
                            }</td>
                            <td style="padding: 10px; border: 1px solid #eee; text-align: center;">${
                              item.calibre
                            }</td>
                            <td style="padding: 10px; border: 1px solid #eee; text-align: center;">${
                              item.categoria
                            }</td>
                            <td style="padding: 10px; border: 1px solid #eee; text-align: center;">${
                              item.preciosFOB
                            }</td>
                            <td style="padding: 10px; border: 1px solid #eee; text-align: center;">${
                              item.estado
                            }</td>
                        </tr>
                    `
                      )
                      .join("")}
                    <tr style="background-color: #e0e0e0;">
                        <td colSpan="7" style="padding: 12px 10px; text-align: right; font-weight: bold; border: 1px solid #ccc; border-bottom-left-radius: 8px;">Total de Pallets:</td>
                        <td colSpan="1" style={{ padding: '12px 10px', fontWeight: 'bold', borderBottomRightRadius: '8px', textAlign: 'center' }}>
                          ${currentTotalPallets} Pallets
                        </td>
                    </tr>
                </tbody>
            </table>

            <p style="margin-top: 25px; font-weight: bold;">Saludos.</p>
            <p style="font-weight: bold;">Miguel Pérez Fernández</p>
            <p>Asistente Comercial</p>
        </div>
    `;
    return htmlContent;
  };

  // Function to copy the formatted HTML content to clipboard
  const copyFormattedContentToClipboard = (content) => {
    const tempDiv = document.createElement("div");
    tempDiv.innerHTML = content;
    tempDiv.style.position = "absolute";
    tempDiv.style.left = "-9999px";
    document.body.appendChild(tempDiv);

    const range = document.createRange();
    range.selectNodeContents(tempDiv);
    const selection = window.getSelection();
    selection.removeAllRanges();
    selection.addRange(range);

    document.execCommand("copy");
    document.body.removeChild(tempDiv);
  };

  // Function to handle the "Prepare Email in Gmail" action
  const handlePrepareEmailInGmail = () => {
    // Pass the calculated totalPallets to the HTML content generation function
    const generatedHtml = generateFormattedEmailHtmlContent(totalPallets);
    copyFormattedContentToClipboard(generatedHtml);

    // Use the value from the emailSubject input field
    const subject = headerInfo.emailSubject
      ? headerInfo.emailSubject
      : currentDocumentId;

    const recipient = "";
    window.open(
      `https://mail.google.com/mail/?view=cm&fs=1&tf=1&to=${recipient}&su=${encodeURIComponent(
        subject
      )}&body=`,
      "_blank"
    );

    setShowEmailContent(true);
  };

  return (
    <div className="min-h-screen bg-gray-100 p-4 sm:p-6 lg:p-8 font-inter">
      <div className="max-w-4xl mx-auto bg-white rounded-xl shadow-lg p-6 sm:p-8 space-y-6">
        {/* Header Section */}
        <div className="border-b pb-4 mb-4">
          <h1 className="text-xl sm:text-2xl font-bold text-center text-gray-800 mb-4">
            {/* ID del Documento is now visually removed from top of UI */}
          </h1>
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 mt-4">
            {/* "Nombre de Proveedor" is visible to feed the dynamic ID */}
            <div>
              <InputField
                label="Nombre de Proveedor:"
                name="reDestinatarios"
                value={headerInfo.reDestinatarios}
                onChange={handleHeaderChange}
                placeholder="Nombre de Proveedor (para ID y Asunto)"
              />
            </div>
            {/* "País" field - Now with standardized styling */}
            <div>
              <InputField
                label="País:"
                name="deNombrePais"
                value={headerInfo.deNombrePais}
                onChange={handleHeaderChange}
                placeholder="País de origen"
              />
            </div>
            {/* Email Subject field - NEWLY ADDED */}
            <div>
              <InputField
                label="Asunto del Email:"
                name="emailSubject"
                value={headerInfo.emailSubject}
                onChange={handleHeaderChange}
                placeholder="Asunto del Correo (Se auto-completa)"
              />
            </div>
            {/* Remaining header fields */}
            <div>
              <InputField
                label="Nave:"
                name="nave"
                value={headerInfo.nave}
                onChange={handleHeaderChange}
                placeholder="NOMBRE DE BARCO"
              />
            </div>
            <div>
              <InputField
                label="Fecha de carga:"
                name="fechaCarga"
                value={headerInfo.fechaCarga}
                onChange={handleHeaderChange}
                placeholder="FECHA DE CARGA"
                type="date"
              />
            </div>
            <div>
              <InputField
                label="Exporta:"
                name="exporta"
                value={headerInfo.exporta}
                onChange={handleHeaderChange}
                placeholder="EXPORTADORA"
              />
            </div>
          </div>
        </div>

        {/* Order Items Table Section */}
        <div className="overflow-x-auto rounded-lg shadow-md">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-blue-600 text-white">
              <tr style={{ backgroundColor: "#2563eb", color: "#ffffff" }}>
                <th
                  scope="col"
                  className="px-4 py-3 text-center text-xs font-medium uppercase tracking-wider rounded-tl-lg"
                >
                  Pallets
                </th>
                <th
                  scope="col"
                  className="px-4 py-3 text-center text-xs font-medium uppercase tracking-wider"
                >
                  Especie
                </th>
                <th
                  scope="col"
                  className="px-4 py-3 text-center text-xs font-medium uppercase tracking-wider"
                >
                  Variedad
                </th>
                <th
                  scope="col"
                  className="px-4 py-3 text-center text-xs font-medium uppercase tracking-wider"
                >
                  Formato
                </th>
                <th
                  scope="col"
                  className="px-4 py-3 text-center text-xs font-medium uppercase tracking-wider"
                >
                  Calibre
                </th>
                <th
                  scope="col"
                  className="px-4 py-3 text-center text-xs font-medium uppercase tracking-wider"
                >
                  Categoría
                </th>
                <th
                  scope="col"
                  className="px-4 py-3 text-center text-xs font-medium uppercase tracking-wider"
                >
                  Precios FOB
                </th>
                <th
                  scope="col"
                  className="px-4 py-3 text-center text-xs font-medium uppercase tracking-wider rounded-tr-lg"
                >
                  Estado
                </th>
                <th
                  scope="col"
                  className="px-4 py-3 text-center text-xs font-medium uppercase tracking-wider"
                >
                  Acciones
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {orderItems.map((item, index) => (
                <tr
                  key={item.id}
                  className="hover:bg-gray-50"
                  style={
                    index % 2 === 0
                      ? { backgroundColor: "#f9f9f9" }
                      : { backgroundColor: "#ffffff" }
                  }
                >
                  <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-900 border-r text-center">
                    <TableInput
                      type="number"
                      name="pallets"
                      value={item.pallets}
                      onChange={(e) => handleItemChange(item.id, e)}
                      placeholder="Ej. 21"
                    />
                  </td>
                  <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-900 border-r text-center">
                    <TableInput
                      name="especie"
                      value={item.especie}
                      onChange={(e) => handleItemChange(item.id, e)}
                      placeholder="Ej. Manzana"
                    />
                  </td>
                  <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-900 border-r text-center">
                    <TableInput
                      name="variedad"
                      value={item.variedad}
                      onChange={(e) => handleItemChange(item.id, e)}
                      placeholder="Ej. Galas"
                    />
                  </td>
                  <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-900 border-r text-center">
                    <TableInput
                      name="formato"
                      value={item.formato}
                      onChange={(e) => handleItemChange(item.id, e)}
                      placeholder="Ej. 20 Kg"
                    />
                  </td>
                  <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-900 border-r text-center">
                    <TableInput
                      name="calibre"
                      value={item.calibre}
                      onChange={(e) => handleItemChange(item.id, e)}
                      placeholder="Ej. 100;113"
                    />
                  </td>
                  <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-900 border-r text-center">
                    <TableInput
                      name="categoria"
                      value={item.categoria}
                      onChange={(e) => handleItemChange(item.id, e)}
                      placeholder="Ej. PRE:XFY"
                    />
                  </td>
                  <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-900 border-r text-center">
                    <TableInput
                      name="preciosFOB"
                      value={item.preciosFOB}
                      onChange={(e) => handleItemChange(item.id, e)}
                      placeholder="Ej. $14"
                    />
                  </td>
                  <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-900 border-r text-center">
                    <TableInput
                      name="estado"
                      value={item.estado}
                      onChange={(e) => handleItemChange(item.id, e)}
                      placeholder="Ej. Vigente"
                    />
                  </td>
                  <td className="px-4 py-2 whitespace-nowrap text-right text-sm font-medium">
                    <button
                      onClick={() => handleDeleteItem(item.id)}
                      className="text-red-600 hover:text-red-900 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 p-1 rounded-md"
                      title="Eliminar fila"
                    >
                      {/* Trash Can SVG icon */}
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-5 w-5"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                      >
                        <path
                          fillRule="evenodd"
                          d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 011-1h4a1 1 0 110 2H8a1 1 0 01-1-1zm2 3a1 1 0 011-1h4a1 1 0 110 2H8a1 1 0 01-1-1zm-1 4a1 1 0 002 0v-4a1 1 0 00-2 0v4z"
                          clipRule="evenodd"
                        />
                      </svg>
                    </button>
                  </td>
                </tr>
              ))}
              {/* Total Pallets row */}
              <tr style={{ backgroundColor: "#e0e0e0" }}>
                <td
                  colSpan={7}
                  style={{
                    padding: "12px 10px",
                    textAlign: "right",
                    fontWeight: "bold",
                    borderRight: "1px solid #ccc",
                    borderBottomLeftRadius: "8px",
                  }}
                >
                  Total de Pallets:
                </td>
                <td
                  colSpan={1}
                  style={{
                    padding: "12px 10px",
                    fontWeight: "bold",
                    borderBottomRightRadius: "8px",
                    textAlign: "center",
                  }}
                >
                  {totalPallets} Pallets
                </td>
              </tr>
            </tbody>
          </table>
        </div>

        {/* Action Buttons */}
        <div className="flex flex-col sm:flex-row justify-center gap-4 mt-6">
          <button
            onClick={handleAddItem}
            className="flex items-center justify-center px-6 py-3 bg-green-600 text-white font-semibold rounded-lg shadow-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition duration-150 ease-in-out transform hover:scale-105"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 mr-2"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"
                clipRule="evenodd"
              />
            </svg>
            Añadir Línea de Pedido (Duplicar Última)
          </button>

          <button
            onClick={handlePrepareEmailInGmail} // This button now handles both copy and open Gmail
            className="flex items-center justify-center px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition duration-150 ease-in-out transform hover:scale-105"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 mr-2"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
              <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
            </svg>
            Preparar Email en Gmail
          </button>
        </div>

        {/* Footer Section */}
        <div className="text-center mt-8 pt-4 border-t border-gray-200">
          <p className="text-gray-600 text-sm mb-2">Saludos.</p>
          <p className="font-semibold text-gray-800 text-base">
            Miguel Pérez Fernández
          </p>
          <p className="text-gray-600 text-sm">Asistente Comercial</p>
        </div>

        {/* Email Content Modal (simplified) */}
        {showEmailContent && (
          <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-sm text-center">
              <h2 className="text-xl font-bold mb-6 text-gray-800">
                Email Preparado
              </h2>
              <p className="mb-6 text-gray-700">
                Se ha copiado la tabla formateada a tu portapapeles y se ha
                abierto Gmail con el cuerpo vacío.
                <br />
                Ahora, **pega (Ctrl+V o Cmd+V)** la tabla directamente en el
                cuerpo del correo.
              </p>
              <div className="flex justify-center mt-4">
                <button
                  onClick={() => setShowEmailContent(false)}
                  className="px-6 py-3 bg-gray-300 text-gray-800 font-semibold rounded-lg shadow-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition duration-150 ease-in-out"
                >
                  Cerrar
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;
